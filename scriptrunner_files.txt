 from streamlit.runtime.scriptrunner import add_script_run_ctx
 from streamlit.runtime.scriptrunner.script_run_context import get_script_run_ctx

import streamlit as st
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from streamlit.runtime.scriptrunner import add_script_run_ctx
from streamlit.runtime.scriptrunner.script_run_context import get_script_run_ctx
import threading
from dotenv import load_dotenv

load_dotenv()

st.set_page_config("LLM TEST")

MODEL_CHOICES = ['gpt-3.5-turbo', 'gpt-4-turbo']
selected_models = st.multiselect("Select models:", MODEL_CHOICES, default=MODEL_CHOICES)

def call_chain(ctx, model_name, prompt):
    add_script_run_ctx(threading.current_thread(), ctx)
    try:
        llm = ChatOpenAI(model=model_name, temperature=0, streaming=True)
        input = ChatPromptTemplate.from_messages(
            [
                ("system", "You are a helpful assistant that answers questions."),
                ("human", "{input}")
            ]
        )
        chain = input | llm
        for i in chain.stream(input=prompt):
            yield i.content
    except Exception as e:
        yield f"Error: {str(e)}"

def threading_output(prompt):
    ctx = get_script_run_ctx()
    if len(selected_models) == 1:
        cols = [st]
    else:
        cols = st.columns(len(selected_models))
    threads = []

    for i, model in enumerate(selected_models):
        generator = call_chain(ctx, model, prompt)
        thread = threading.Thread(target=lambda gen=generator, col=cols[i]: give_output(gen, col), daemon=True)
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

def give_output(generator, col):
    add_script_run_ctx(threading.current_thread(), get_script_run_ctx())
    col.write_stream(generator)

user_prompt = st.chat_input("Write a question")

if user_prompt:
    threading_output(user_prompt)




    


 import streamlit as st
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from streamlit.runtime.scriptrunner import add_script_run_ctx
from streamlit.runtime.scriptrunner.script_run_context import get_script_run_ctx
import threading
from dotenv import load_dotenv

load_dotenv()

st.set_page_config("LLM TEST")

def call_chain(ctx, model_name, prompt):
    add_script_run_ctx(threading.current_thread(), ctx)
    try:
        # Creating a model instance
        llm = ChatOpenAI(model=model_name, temperature=0, streaming=True)
        input = ChatPromptTemplate.from_messages(
            [
                (
                    "system",
                    "You are a Assistant which gives answer to user questions...",
                ),
                ("human", "{input}"),
            ]
        )
        chain = input | llm
        
        # Yield each result from the generator
        for i in chain.stream(input=prompt):
            yield i.content
    except Exception as e:
        yield f"Error: {str(e)}"
        return  # Signal end of the gen

def threading_output(prompt):
    ctx = get_script_run_ctx()  # Streamlit columns for output
    cols = st.columns(2)
    models = ['gpt-3.5-turbo', 'gpt-4-turbo']
    threads = []

    # Setup threads directly streaming outputs to UI components
    for i, model in enumerate(models):
        generator = call_chain(ctx, model, prompt)
        thread = threading.Thread(target=lambda: give_output(generator, cols[i]), daemon=True)
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

def give_output(generator, col):
    add_script_run_ctx(threading.current_thread(), get_script_run_ctx())
    output_text = []
    col.write_stream(generator)  # Dynamically update column text

user_prompt = st.chat_input("Write a question")


if user_prompt:
    threading_output(user_prompt)




from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_core.prompts import ChatPromptTemplate
from dotenv import load_dotenv
import queue
import threading
import streamlit as st
from streamlit.runtime.scriptrunner import add_script_run_ctx
from streamlit.runtime.scriptrunner.script_run_context import get_script_run_ctx
load_dotenv()


st.set_page_config("LLM TEST")

def call_chain(ctx, model_name, output_queue, prompt):
    add_script_run_ctx(threading.current_thread(), ctx)
    try:
        # Using stream=True to continuously stream the output from the model
        llm = ChatOpenAI(model=model_name, temperature=0, streaming=True)
        input = ChatPromptTemplate.from_messages(
        [
            (
                "system",
                "You are a Assistant which gives answer to user questions and please dont tell user to ask you something if user writes a prompt then only generate output",
            ),
            ("human", "{input}"),
        ]
    )
        chain = input | llm

        for i in chain.stream(input = prompt):
            output_queue.put(i.content)
    except Exception as e:
        output_queue.put(f"Error: {str(e)}")
    finally:
        output_queue.put(None)
    
    return output_queue

def give_output(ctx, model, output_queue, cols):
    add_script_run_ctx(threading.current_thread(), ctx)
    output_text = []
    cols = st.empty()
    while True:
        content = output_queue.get()
        if content is None:
            break
        output_text.append(content)
        formatted_output = " ".join(output_text)
        cols.markdown(content)
    return formatted_output

def threading_output(prompt):
    ctx = get_script_run_ctx()
    queues = {'gpt-4-turbo': queue.Queue(), 'gpt-4-turbo': queue.Queue()}
    models = ['gpt-4-turbo', 'gpt-4-turbo']
    threads = []

    for i, model in enumerate(models):
            cols[i].markdown(model)
            thread = threading.Thread(target=call_chain, args=(ctx, model, queues[model], prompt), daemon=True)
            threads.append(thread)
            thread.start()
    
    for i, model in enumerate(models):
            thread = threading.Thread(target=give_output, args=(ctx, model, queues[model], cols[i]), daemon=True)
            threads.append(thread)
            thread.start()

    for thread in threads:
        thread.join()

    

user_prompt = st.chat_input(placeholder="Write a question")
cols = st.columns(2)

if user_prompt != None:
    threading_output(user_prompt)







    background-color: #0f1116;
    position: sticky;
    bottom: -15px;
    margin-left: -15px;
    /* margin-bottom: -50px; */
    padding-left: 15px;
    /* width: 438px; */
    overflow: hidden;
    padding-bottom: 15px;


rgb(131, 201, 255)
rgb(0, 104, 201)
rgb(255, 171, 171)







#################### SENTENCE SIMILARITY ##############################

from transformers import AutoTokenizer, AutoModel
import torch
from scipy.spatial.distance import cosine

def load_model(model_name="sentence-transformers/all-MiniLM-L6-v2"):
    """ Load the tokenizer and model """
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModel.from_pretrained(model_name)
    return tokenizer, model

def get_sentence_embedding(sentence, tokenizer, model):
    """ Returns the embedding of a sentence """
    inputs = tokenizer(sentence, return_tensors='pt', padding=True, truncation=True)
    with torch.no_grad():
        outputs = model(**inputs)
    # Use mean of last hidden state as sentence representation
    sentence_embedding = outputs.last_hidden_state.mean(dim=1).squeeze()
    return sentence_embedding

def calculate_similarity(sentence1, sentence2, tokenizer, model):
    """ Calculate cosine similarity between embeddings of two sentences """
    emb1 = get_sentence_embedding(sentence1, tokenizer, model)
    emb2 = get_sentence_embedding(sentence2, tokenizer, model)
    similarity = 1 - cosine(emb1.numpy(), emb2.numpy())
    return similarity

# Example usage
tokenizer, model = load_model()
sentence1 = "Here is the original version of the prompt."
sentence2 = "Here is the updated version of the prompt with different content."

similarity = calculate_similarity(sentence1, sentence2, tokenizer, model)
print(f"Semantic Similarity: {similarity:.2f}")



##########################################################################################

import streamlit as st
from supabase import create_client, Client
import webbrowser
# Supabase credentials
SUPABASE_URL = "https://cptvgsqarjrhkxiuuptj.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNwdHZnc3FhcmpyaGt4aXV1cHRqIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTcxNDM2Njk4MSwiZXhwIjoyMDI5OTQyOTgxfQ.gCItJEn9Ny0EFaFoZ44r0Oxo-vtSKqjQ6ibA3Yf-sJY"

# Initialize Supabase client
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# Streamlit page setup
st.set_page_config(page_title="App", page_icon="🔒")

# Initialize session state variables
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'email' not in st.session_state:
    st.session_state.email = ''

def check_user_exists(email):
    try:
        response = supabase.from_("user_view").select("id").eq("email", email).execute()
        if response.data:
            return True
        return False
    except Exception as e:
        st.error(f"Error checking user: {e}")
        return False

def sign_up(email, password):
    if check_user_exists(email):
        st.error("This email is already registered. Please sign in instead.")
        return

    try:
        user = supabase.auth.sign_up({
            'email': email,
            'password': password,
        })
        st.success("Sign-up successful! Please check your email to confirm your account.")
    except Exception as e:
        st.error(f"Error: {e}")

def sign_in(email, password):
    try:
        user = supabase.auth.sign_in_with_password({
            'email': email,
            'password': password,
        })
        st.session_state.logged_in = True
        st.session_state.email = email
        st.success("Sign-in successful!")
        st.experimental_rerun()  # Reload the app to update the session state
    except Exception as e:
        st.error(f"Error: {e}")

def sign_in_with_google():
    try:
        # This will redirect the user to the Google sign-in page
        result = supabase.auth.sign_in_with_oauth({"provider": 'google'})
        webbrowser.open(result.url)
        st.session_state.logged_in = True
    except Exception as e:
        st.error(f"Error: {e}")

def sign_out():
    st.session_state.logged_in = False
    st.session_state.email = ''
    st.experimental_rerun()

def confirm_user(session_id, user_id):
    try:
        # Assuming the confirmation token and user_id are passed as query parameters
        user = supabase.auth.api.get_user(session_id)
        if user:
            st.session_state.logged_in = True
            st.session_state.email = user['email']
            st.success("Email confirmed and sign-in successful!")
            st.experimental_rerun()  # Reload the app to update the session state
    except Exception as e:
        st.error(f"Confirmation error: {e}")


if st.session_state.logged_in:
    st.sidebar.write(f"Logged in as {st.session_state.email}")
    if st.sidebar.button("Logout"):
        sign_out()
    
    # Main content for logged-in users
    st.write("Welcome to the app!")
    # Add your application content here

else:
    st.title("Welcome to the App")
    st.write("Please sign in or sign up to continue.")

    auth_action = st.selectbox("Choose an action", ["Sign In", "Sign Up"])
    email = st.text_input("Email")
    password = st.text_input("Password", type="password")

    if auth_action == "Sign Up":
        if st.button("Sign Up"):
            if email and password:
                sign_up(email, password)
            else:
                st.error("Please provide both email and password.")
    else:
        if st.button("Sign In"):
            if email and password:
                sign_in(email, password)
            else:
                st.error("Please provide both email and password.")
        if st.button("Sign In with Google"):
            sign_in_with_google()




######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################


import streamlit as st
from supabase import create_client, Client
from dotenv import load_dotenv
from navigation import make_sidebar
import os

load_dotenv()
# Supabase credentials
SUPABASE_URL = os.environ.get('SUPABASE_URL')
SUPABASE_KEY = os.environ.get('SUPABASE_KEY')

# Initialize Supabase client
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# Streamlit page setup
st.set_page_config(page_title="App", page_icon="🔒")

# Initialize session state variables
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'email' not in st.session_state:
    st.session_state.email = ''

def check_user_exists(email):
    try:
        response = supabase.from_("user_view").select("id").eq("email", email).execute()
        if response.data:
            return True
        return False
    except Exception as e:
        st.error(f"Error checking user: {e}")
        return False

def sign_up(email, password):
    if check_user_exists(email):
        st.error("This email is already registered. Please sign in instead.")
        return

    try:
        user = supabase.auth.sign_up({
            'email': email,
            'password': password,
        })
        st.success("Sign-up successful! Please check your email to confirm your account.")
    except Exception as e:
        st.error(f"Error: {e}")

def sign_in(email, password):
    try:
        user = supabase.auth.sign_in_with_password({
            'email': email,
            'password': password,
        })
        st.session_state.logged_in = True
        st.session_state.email = email
        st.switch_page('pages/2_🌍_main.py')
    except Exception as e:
        st.error(f"Error: {e}")

def sign_out():
    st.session_state.logged_in = False
    st.session_state.email = ''
    st.experimental_rerun()

def confirm_user(session_id, user_id):
    try:
        # Assuming the confirmation token and user_id are passed as query parameters
        user = supabase.auth.api.get_user(session_id)
        if user:
            st.session_state.logged_in = True
            st.session_state.email = user['email']
            st.success("Email confirmed and sign-in successful!")
            st.experimental_rerun()  # Reload the app to update the session state
    except Exception as e:
        st.error(f"Confirmation error: {e}")


if st.session_state.logged_in:
    st.sidebar.write(f"Logged in as {st.session_state.email}")
    if st.sidebar.button("Logout"):
        sign_out()
    
    # Main content for logged-in users
    st.write("Welcome to the app!")
    # Add your application content here

else:
    
    # Creating columns for layout
    col1, col2, col3 = st.columns([1,3,1])  # Adjust the numbers to change the width of the columns

    with col2:
        # Creating tabs for Sign In and Sign Up
        tab1, tab2 = st.tabs(["Sign In", "Sign Up"])

        with tab1:
            st.markdown("<h1 style='text-align: center;'>Sign In</h1>", unsafe_allow_html=True)
            email = st.text_input("Email", key='login_email')
            password = st.text_input("Password", type="password", key='login_pass')
            if st.button("Sign In"):
                if email and password:
                    sign_in(email, password)
                else:
                    st.error("Please provide both email and password.")

        with tab2:
            st.markdown("<h1 style='text-align: center;'>Sign Up</h1>", unsafe_allow_html=True)
            email = st.text_input("Email", key='signup_email')
            password = st.text_input("Password", type="password")
            if st.button("Sign Up"):
                if email and password:
                    sign_up(email, password)
                else:
                    st.error("Please provide both email and password.")